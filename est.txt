Estratégia Nova

Ordena as pistas por menor quantidade de aviões;

Se normal {
    while(!testar todas as pistas && !colocado) { 
        Começa no último lugar da fila - POS;
        while(POS > 0 && !colocado) { 
            Ve se dá para colocar em POS;
            Se der certo {
                Precisa verificar, caso POS < quantidade de aviões, se pode empurrar os outros;
                colocado = 1;
            }
            Se não {
                próxima posição;
            }
        }
        if(!colocado) {
            proxima pista;
        }
    }
    Caso não tenha colocado - Bota na fila de espera;
}
Se Especial {
    while(!testar todas as pistas && !colocado) { 
        Começa no primeiro lugar da fila - POS;
        Verifica se os outros podem ser empurrados para trás;
        Se sim {
            colocado = 1;
        }
        Se não {
            próxima pista;
        }
    }
}




// Pedaço de Código




                if(i == 0) {
                    cout << aviao_aux.id << endl;
                    p3.fila = insere_em_pos(p3.fila, 1, aviao_aux, p3.quantidade);
                    cout << "Há " << ++p3.quantidade << " na p3\n";
                } 
                else if(i % 3 == 0) {
                    cout << aviao_aux.id << endl;
                    p3.fila = insere_em_pos(p3.fila, p3.quantidade + 1, aviao_aux, p3.quantidade);
                    cout << "Há " << ++p3.quantidade << " na p3\n"; 
                }
                if(i % 8 == 0 && i != 0) {
                    cout << "COMECEI AQUIIIII\n\n";
                    cout << p3.quantidade << endl;
                    cout << conta_posicoes(p3.fila) << endl;

                    for(Fila * p = p3.fila; p != nullptr; p = p->prox) {
                        cout << p->aviao.id << endl;
                    }

                    p3.fila = insere_em_pos(p3.fila, p3.quantidade, aviao_aux, p3.quantidade);
                    cout << "Há here " << ++p3.quantidade << " na p3\n"; 
                } 

                /*if(i == 0) {
                    cout << aviao_aux.id << endl;
                    p3.insere_em_pos(aviao_aux, 1);
                    cout << "Há " << p3.quantidade << " na p3\n";
                }
                else if(i % 3 == 0) { 
                    p3.insere_em_pos(aviao_aux, p3.quantidade + 1);
                    cout << "Inseriu no final: " << aviao_aux.id << endl;
                    cout << "Há " << p3.quantidade << " na p3\n";
                }
                else if(i % 8 == 0 && p3.quantidade <= 7 ) {
                    p3.insere_em_pos(aviao_aux, 2);
                }
                for(FilaP * p = pistas; p != nullptr; p = p->prox) {
                    cout << p->pista.id << endl;
                }
                cout << endl; 

                pistas = nullptr; */




Se o comb - DeltaT - tempo_interditada == 0 {
    While(!testar todas as pistas) {
        POS = 1;
        chao = 1;
        while(POS != quantidade da pista && !deu_certo) {
            teste = simula_na_pos(Aviao atual);
            Se der certo { 
                aviao = aviao.prox;
                pos++
            }
            Se não {
                Procura algúem entre pos e chao que possa ser colocado em pos + 1;
                Salva esse algúem em aux;
                if(chao == pos) {
                    proxima pista;
                }
                Se achar {
                    chao = aux;
                    // Trocar?
                }
                Se não {
                    proxima pista;
                    errado = 1;
                }
                if(trocar && !errado) {
                    troca e coloca;
                    deu certo = 1;
                }
            }
            errado = 0;
        }
        if(deu certo) {
            coloca na pos 1;
        }
        else {
            manda para outro aeroporto;
        }
    }



}